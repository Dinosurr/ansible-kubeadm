---
- set_fact:
   k8s_version_under_1_17: "{{ k8s_version is version('1.17.0', '<') }}"

- name: Install required packages
  apt:
    pkg:
    - arptables
    - ebtables
    - aptitude
    - python3-apt
    - python3-kubernetes
    - gnupg

- name: Change so iptables and arptables legacy is being used.
  alternatives:
    name="{{ item.name }}"
    path="{{ item.path }}"
  loop:
    - { name: 'iptables', path: '/usr/sbin/iptables-legacy' }
    - { name: 'ip6tables', path: '/usr/sbin/ip6tables-legacy' }
    - { name: 'arptables', path: '/usr/sbin/arptables-legacy' }
    - { name: 'ebtables', path: '/usr/sbin/ebtables-legacy' }

- name: Make sure swap is not in fstab
  lineinfile:
    path: /etc/fstab
    state: absent
    regexp: 'swap'

# - name: disable swap and set it to masked
#   systemd:
#     name: dev-sda2.swap
#     enabled: no
#     masked: yes
#   register: SwapStatus

# - name: Reboot server to make sure swap is disabled.
#   reboot:
#     reboot_timeout: 3600
#   when: SwapStatus.changed

- name: Install docker GPG key
  apt_key: url=https://download.docker.com/linux/debian/gpg state=present

- name: Install docker repo
  apt_repository: repo='deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable' state=present

- name: retrieve installed packages
  package_facts:
    manager: "apt"

- name: install containerd
  apt:
    name:
      - containerd

- name: retrieve hold docker version status
  command: "apt-mark showhold"
  register: "apt_mark"
  changed_when: false

- name: Enable and start docker service
  service: name=containerd state=started enabled=yes

- name: add containerd config
  copy:
    src: config.toml
    dest: /etc/containerd/config.toml
  notify: restart containerd

- name: Ensure br_netfilter is enabled.
  modprobe:
    name: br_netfilter
    state: present

- name: ensure values are set correctly in sysctl
  sysctl:
    name: '{{ item.name }}'
    value: '{{ item.value }}'
    state: present
    reload: yes
  loop:
    - name: 'net.bridge.bridge-nf-call-iptables'
      value: '1'
    - name: 'net.ipv4.ip_forward'
      value: '1'
    - name: 'net.bridge.bridge-nf-call-ip6tables'
      value: '1'

- name:  Check kubelet version
  shell: "dpkg -l |grep kubelet | awk '{ print $2,$3 }' |tr ' ' '='"
  register: "InstalledK8sVersion"
  changed_when: false

- name: unhold kubectl when we want to upgrade
  shell: "aptitude unhold kubectl"
  when: "kubeadm_version not in InstalledK8sVersion.stdout and 'kubectl' in ansible_facts.packages"

- name: unhold kubelet when we want to upgrade
  shell: "aptitude unhold kubelet"
  when: "kubeadm_version not in InstalledK8sVersion.stdout and 'kubelet' in ansible_facts.packages"

- name: unhold kubeadm when we want to upgrade
  shell: "aptitude unhold kubeadm"
  when: "kubeadm_version not in InstalledK8sVersion.stdout and 'kubeadm' in ansible_facts.packages"

- name: Install kubernetes GPG key
  apt_key: url=https://packages.cloud.google.com/apt/doc/apt-key.gpg state=present

- name: Install kubernetes repo
  apt_repository: repo='deb https://apt.kubernetes.io/ kubernetes-xenial main' state=present

- name: Install Kubeadm and kubelet
  apt: pkg={{ item }}={{ kubeadm_version }} state=present update_cache=yes
  loop:
   - kubectl
   - kubelet
   - kubeadm

- name: retrieve hold version status
  command: "apt-mark showhold"
  register: "apt_mark"
  changed_when: false

- name: hold kubectl version
  shell: aptitude hold kubectl
  when: "'kubectl' not in apt_mark.stdout"

- name: hold kubelet version
  shell: aptitude hold kubelet
  when: "'kubelet' not in apt_mark.stdout"

- name: hold kubeadm version
  shell: aptitude hold kubeadm
  when: "'kubeadm' not in apt_mark.stdout"

